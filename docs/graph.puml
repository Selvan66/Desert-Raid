@startuml sfml_project

!define DARKBLUE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml


class SceneNode << Base Class >> {
    Tree class responseible for drawing objects in window
}

class SpriteNode extends SceneNode {
    Draw simple sprite on window
}

class TextNode extends SceneNode {
    Draw text on window
}

class Entity extends SceneNode {
    Class give objects ability to move
}

class Aircraft extends Entity {
    Draw ship sprite on window
}

class Pickup extends Entity {
    Draw pickups on window
}

class Projectile extends Entity {
    Draw projectiles on window
}

class ResourceHolder << typename T >> {
    Class holds type T resource
}

class TextureHolder {
    Holds all textures
}

TextureHolder ..> ResourceHolder

class FontHolder {
    Holds all fonts
}

FontHolder ..> ResourceHolder

class Application {
    Process inputs, main loop
}

class World {
    Draw all world and update move
}

SceneNode --* World

class Command {
    Store action and category for objects
}

class CommandQueue {
    Store commands for execution
}

Command --* CommandQueue
CommandQueue --* World

class Player {
    Responsible for player inputs and events
}

class StateStack {
    State machine (stack of states)
}

StateStack --* Application

class State << Base Class >> {
    Base class for all states
}

State --* StateStack

class Context {
    Contain textures, font, main window and player
}

Context --* State
Player --* Context
TextureHolder --* Context
FontHolder --* Context
sf::RenderWindow --* Context

class GameState extends State {
    Drawing world and player
}

World --* GameState

class MenuState extends State {
    Allows to choose what we want to do at start
}

class TitleState extends State {
    Open at the start of the game. (Print: "Press any key to start")
}

class PauseState extends State {
    Allow pause game while playing
}

class SettingsState extends State {
    Allow to change move set
}

class GameOverState extends State {
    Open up when player lose or win 
}

class LoadingState extends State {
    Allows to load textures
}

class ParallelTask {
    Allow to do thing in another thread
}

ParallelTask --* LoadingState

class Component << Base Class >> {
    GUI component for player used
}

class Label extends Component {
    Contain text
}

class Button extends Component {
    Button
}

class Container extends Component {
    Grupe components
}

Container --* MenuState
Container --* SettingsState

class Animation {
    Enable make animation from image
}

Animation --* Aircraft

class PostEffect {
    Enable using shaders
}

class BloomEffect extends PostEffect {
    Adding bloom shader/effect
}

BloomEffect --* World

class Particle {
    Containe information about single particle
}

class ParticleNode extends SceneNode {
    Containe particles and draw it to world
}

Particle --* ParticleNode

class EmitterNode extends SceneNode {
    Make 'handle' where particle are made
}

ParticleNode <..> EmitterNode

@enduml